AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SkogApp SAM Template for AWS Lambda and API Gateway

############################## RESOURCES
Resources:
  ############################## BUCKETS AND THEIR PERMISSIONS
  SkogAppOutputsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: skogapp-lambda-generated-outputs
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt SkogAppHKFeatureInfo.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: SkogAppHKVectorize/
                  - Name: suffix
                    Value: .prj
          - Function: !GetAtt SkogAppHKFeatureAirtable.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: SkogAppHKFeatureInfo/
                  - Name: suffix
                    Value: .prj
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'  # Replace with your React app's domain for better security
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - '*'
            ExposedHeaders:
              - ETag
            MaxAge: 3000
    DependsOn: 
      - SkogAppHKFeatureInfoPermission
      - SkogAppHKFeatureAirtablePermission
      
  SkogAppHKFeatureInfoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SkogAppHKFeatureInfo.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::skogapp-lambda-generated-outputs

  SkogAppHKFeatureAirtablePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SkogAppHKFeatureAirtable.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::skogapp-lambda-generated-outputs
  ############################## QUEUES
  SkogAppQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SkogAppQueue
      VisibilityTimeout: 900  # Set visibility timeout to match or exceed Lambda function timeout
  ############################## VPC AND NAT for Lambdas to be able access the internet
  SkogAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: SkogAppVPC

  SkogAppPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkogAppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SkogAppPublicSubnet

  SkogAppPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkogAppVPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: SkogAppPrivateSubnet

  SkogAppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SkogAppInternetGateway

  SkogAppAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SkogAppVPC
      InternetGatewayId: !Ref SkogAppInternetGateway
  
  SkogAppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SkogAppVPC
      Tags:
        - Key: Name
          Value: SkogAppPrivateRouteTable
  
  SkogAppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SkogAppVPC
      Tags:
        - Key: Name
          Value: SkogAppPublicRouteTable

  SkogAppPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SkogAppPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SkogAppInternetGateway

  SkogAppNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SkogAppEIP.AllocationId
      SubnetId: !Ref SkogAppPublicSubnet
      Tags:
        - Key: Name
          Value: SkogAppNatGateway

  SkogAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SkogAppPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SkogAppPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SkogAppNatGateway

  SkogAppPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SkogAppPublicSubnet
      RouteTableId: !Ref SkogAppPublicRouteTable

  SkogAppPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SkogAppPrivateSubnet
      RouteTableId: !Ref SkogAppPrivateRouteTable

  SkogAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic
      VpcId: !Ref SkogAppVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SkogAppSecurityGroup

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref SkogAppVPC  # The VPC for your Lambda functions
      PeerVpcId: vpc-0d994e44521f7b039  # The VPC for your RDS instance
      PeerRegion: eu-north-1  # Adjust this if your RDS is in a different region
      Tags:
        - Key: Name
          Value: LambdaToRDSVPCPeering

  VPCPeeringConnectionRouteToRDS:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SkogAppPrivateRouteTable  # The route table of the Lambda VPC
      DestinationCidrBlock: 172.31.0.0/16  # The CIDR block of your RDS VPC
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringConnectionRouteToLambda:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: rtb-0bce011d3fb717246  # The main route table ID of the RDS VPC
      DestinationCidrBlock: !GetAtt SkogAppVPC.CidrBlock
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from Lambda VPC
      VpcId: vpc-0d994e44521f7b039  # The VPC for your RDS instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !GetAtt SkogAppVPC.CidrBlock
      Tags:
        - Key: Name
          Value: RdsSecurityGroup
  
  ############################## LAMBDAS 
  SkogAppTeigFinder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: find/code
      Description: 'Find the Forest GeoJSON based on given Kommunenummer and Matrikkelnummer'
      FunctionName: SkogAppTeigFinder
      MemorySize: 128
      Timeout: 15
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          POSTGIS_DBNAME: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_DBNAME}}"
          POSTGIS_HOST: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_HOST}}"
          POSTGIS_PASSWORD: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_PASSWORD}}"
          POSTGIS_USERNAME: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_USERNAME}}"
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - arn:aws:lambda:eu-north-1:992382379679:layer:psycopg2:1
        - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppTeigFinder:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - sg-038b9a5368c362453
        SubnetIds:
          - subnet-041df92fe43a65071
          - subnet-018ba468c4eb92cc7
          - subnet-0a48cf26e0eafe0cf
        Ipv6AllowedForDualStack: false
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref SkogAppApi
            Path: /find
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  SkogAppHKCut:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKCut-V4.zip
      Description: 'Cut the Forest SVG and PNG from Nibio HK WMS based on the given GeoJSON'
      FunctionName: SkogAppHKCut
      MemorySize: 128
      Timeout: 300
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Environment:
        Variables:
          GDAL_DATA: /var/task/share/gdal
          PROJ_LIB: /var/task/share/proj
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKCut:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKCut/*
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref SkogAppApi
            Path: /cut
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  
  SkogAppHKVectorize:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKVectorize-V18.zip
      Description: 'Vectorize the Forest SVG and SHP from Nibio HK WMS based on the given GeoJSON'
      FunctionName: SkogAppHKVectorize
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      Environment:
        Variables:
          GDAL_DATA: /var/task/share/gdal
          PROJ_LIB: /var/task/share/proj
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKVectorize:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:ListBucket
                - s3:HeadObject
              Resource: 
                - arn:aws:s3:::skogapp-lambda-generated-outputs
                - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKCut/*  
                - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKVectorize/*  
        - Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SkogAppQueue.Arn
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref SkogAppApi
            Path: /vectorize
            Method: POST
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SkogAppQueue.Arn
            BatchSize: 1
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  
  SkogAppHKFeatureInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKFeatureInfo-V7.zip
      Description: 'Get the Feature Info from Nibio HK WMS based on the created SHP file on S3'
      Handler: lambda_function.lambda_handler
      FunctionName: SkogAppHKFeatureInfo
      MemorySize: 512
      Timeout: 900
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKFeatureInfo:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:ListBucket
                - s3:HeadObject
              Resource: 
                - arn:aws:s3:::skogapp-lambda-generated-outputs
                - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKVectorize/*
                - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKFeatureInfo/*
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  
  SkogAppHKFeatureAirtable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKFeatureAirtable-V10.zip
      Description: 'Get the Feature Info SHP file n S3 and creates an Airtable for the user'
      Handler: lambda_function.lambda_handler
      FunctionName: SkogAppHKFeatureAirtable
      MemorySize: 512
      Timeout: 900
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Environment:
        Variables:
          AIRTABLE_PERSONAL_ACCESS_TOKEN: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_PERSONAL_ACCESS_TOKEN}}"
          AIRTABLE_BASE_ID: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_BASE_ID}}"
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKFeatureAirtable:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:ListBucket
                - s3:HeadObject
              Resource: 
                - arn:aws:s3:::skogapp-lambda-generated-outputs
                - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKFeatureInfo/*
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
            
  SkogAppSR16IntersectionToAirtable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppSR16IntersectionToAirtable-V9.zip
      Description: 'Intersect the SR16 data with the given GeoJSON and send the data to Airtable'
      FunctionName: SkogAppSR16IntersectionToAirtable
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          POSTGIS_DBNAME: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_DBNAME}}"
          POSTGIS_HOST: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_HOST}}"
          POSTGIS_PASSWORD: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_PASSWORD}}"
          POSTGIS_USERNAME: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_USERNAME}}"
          AIRTABLE_PERSONAL_ACCESS_TOKEN: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_PERSONAL_ACCESS_TOKEN}}"
          AIRTABLE_BASE_ID: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_BASE_ID}}"
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - arn:aws:lambda:eu-north-1:992382379679:layer:psycopg2:1
        - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppSR16IntersectionToAirtable:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:ListBucket
                - s3:HeadObject
              Resource: arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKFeatureInfo/*
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref SkogAppApi
            Path: /SR16IntersectionToAirtable
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  
  SkogAppModelToAirtable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppModelToAirtable-V3.zip
      Description: 'Create the Bio growth model based on the data from Airtable'
      FunctionName: SkogAppModelToAirtable
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          AIRTABLE_PERSONAL_ACCESS_TOKEN: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_PERSONAL_ACCESS_TOKEN}}"
          AIRTABLE_BASE_ID: !Sub "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/prod/airtable-7Fdto5:SecretString:AIRTABLE_BASE_ID}}"
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-north-1:992382379679:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppModelToAirtable:*
            - Sid: AWSLambdaVPCAccessExecutionPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSubnets
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SkogAppSecurityGroup.GroupId
        SubnetIds:
          - !Ref SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref SkogAppApi
            Path: /model
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto      
  ############################## API GATEWAY
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ApiGatewaySQSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: !GetAtt SkogAppQueue.Arn
  
  SkogAppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SkogAppApi
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "SkogApp API"
        paths:
          /sendToQueue:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/992382379679/SkogAppQueue"
                httpMethod: POST
                type: aws
                credentials: !GetAtt ApiGatewayRole.Arn
                contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: WHEN_NO_TEMPLATES
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: |
                    Action=SendMessage&MessageBody=$util.urlEncode($input.body)
          /find:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppTeigFinder.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /cut:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppHKCut.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /vectorize:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppHKVectorize.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /SR16IntersectionToAirtable:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppSR16IntersectionToAirtable.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /model:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppModelToAirtable.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
        definitions:
          Empty:
            type: object
            title: Empty