AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SkogApp SAM Template for AWS Lambda and API Gateway
Resources:
  SkogAppTeigFilter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-deployment-lambda/b12d21e8e58dca60249ffdd20e8a9339
      Description: Find the Forest GeoJSON based on given Kommunenummer and Matrikkelnummer
      FunctionName: SkogAppTeigFilter
      MemorySize: 128
      Timeout: 5
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          POSTGIS_DBNAME:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_DBNAME}}'
          POSTGIS_HOST:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_HOST}}'
          POSTGIS_PASSWORD:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_PASSWORD}}'
          POSTGIS_USERNAME:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_USERNAME}}'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
      - arn:aws:lambda:eu-north-1:992382379679:layer:psycopg2:1
      - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      PackageType: Zip
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-north-1:992382379679:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppTeigFilter:*
        - Sid: AWSLambdaVPCAccessExecutionPermissions
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSubnets
          - ec2:DeleteNetworkInterface
          - ec2:AssignPrivateIpAddresses
          - ec2:UnassignPrivateIpAddresses
          Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - sg-038b9a5368c362453
        SubnetIds:
        - subnet-041df92fe43a65071
        - subnet-018ba468c4eb92cc7
        - subnet-0a48cf26e0eafe0cf
        Ipv6AllowedForDualStack: false
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId:
              Ref: SkogAppApi
            Path: /filter
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
    Metadata:
      SamResourceId: SkogAppTeigFilter
  SkogAppHKCut:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-cut-lambda-big-file/package-v1.zip
      Description: Cut the Forest SVG and PNG from Nibio HK WMS based on the given
        GeoJSON
      FunctionName: SkogAppHKCut
      MemorySize: 128
      Timeout: 300
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Environment:
        Variables:
          GDAL_DATA: /var/task/share/gdal
          PROJ_LIB: /var/task/share/proj
      PackageType: Zip
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-north-1:992382379679:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKCut:*
        - Sid: AWSLambdaVPCAccessExecutionPermissions
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSubnets
          - ec2:DeleteNetworkInterface
          - ec2:AssignPrivateIpAddresses
          - ec2:UnassignPrivateIpAddresses
          Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SkogAppSecurityGroup
          - GroupId
        SubnetIds:
        - Ref: SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId:
              Ref: SkogAppApi
            Path: /cut
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
    Metadata:
      SamResourceId: SkogAppHKCut
  SkogAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: SkogAppVPC
    Metadata:
      SamResourceId: SkogAppVPC
  SkogAppPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SkogAppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: SkogAppPublicSubnet
    Metadata:
      SamResourceId: SkogAppPublicSubnet
  SkogAppPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SkogAppVPC
      CidrBlock: 10.0.2.0/24
      Tags:
      - Key: Name
        Value: SkogAppPrivateSubnet
    Metadata:
      SamResourceId: SkogAppPrivateSubnet
  SkogAppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: SkogAppInternetGateway
    Metadata:
      SamResourceId: SkogAppInternetGateway
  SkogAppAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: SkogAppVPC
      InternetGatewayId:
        Ref: SkogAppInternetGateway
    Metadata:
      SamResourceId: SkogAppAttachGateway
  SkogAppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: SkogAppVPC
      Tags:
      - Key: Name
        Value: SkogAppPublicRouteTable
    Metadata:
      SamResourceId: SkogAppPublicRouteTable
  SkogAppPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: SkogAppPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: SkogAppInternetGateway
    Metadata:
      SamResourceId: SkogAppPublicRoute
  SkogAppNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - SkogAppEIP
        - AllocationId
      SubnetId:
        Ref: SkogAppPublicSubnet
      Tags:
      - Key: Name
        Value: SkogAppNatGateway
    Metadata:
      SamResourceId: SkogAppNatGateway
  SkogAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      SamResourceId: SkogAppEIP
  SkogAppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: SkogAppVPC
      Tags:
      - Key: Name
        Value: SkogAppPrivateRouteTable
    Metadata:
      SamResourceId: SkogAppPrivateRouteTable
  SkogAppPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: SkogAppPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: SkogAppNatGateway
    Metadata:
      SamResourceId: SkogAppPrivateRoute
  SkogAppPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SkogAppPublicSubnet
      RouteTableId:
        Ref: SkogAppPublicRouteTable
    Metadata:
      SamResourceId: SkogAppPublicSubnetRouteTableAssociation
  SkogAppPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SkogAppPrivateSubnet
      RouteTableId:
        Ref: SkogAppPrivateRouteTable
    Metadata:
      SamResourceId: SkogAppPrivateSubnetRouteTableAssociation
  SkogAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic
      VpcId:
        Ref: SkogAppVPC
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: SkogAppSecurityGroup
    Metadata:
      SamResourceId: SkogAppSecurityGroup
  SkogAppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SkogAppApi
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: '''POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
    Metadata:
      SamResourceId: SkogAppApi
