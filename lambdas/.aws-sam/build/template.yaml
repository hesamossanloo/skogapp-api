AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SkogApp SAM Template for AWS Lambda and API Gateway
Resources:
  SkogAppTeigFilter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SkogAppTeigFilter
      Description: Find the Forest GeoJSON based on given Kommunenummer and Matrikkelnummer
      FunctionName: SkogAppTeigFilter
      MemorySize: 128
      Timeout: 5
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          POSTGIS_DBNAME:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_DBNAME}}'
          POSTGIS_HOST:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_HOST}}'
          POSTGIS_PASSWORD:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_PASSWORD}}'
          POSTGIS_USERNAME:
            Fn::Sub: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-north-1:992382379679:secret:skogapp-api/postgis/v1-YIsWHZ:SecretString:POSTGIS_USERNAME}}'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
      - arn:aws:lambda:eu-north-1:992382379679:layer:psycopg2:1
      - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      PackageType: Zip
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-north-1:992382379679:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppTeigFilter:*
        - Sid: AWSLambdaVPCAccessExecutionPermissions
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSubnets
          - ec2:DeleteNetworkInterface
          - ec2:AssignPrivateIpAddresses
          - ec2:UnassignPrivateIpAddresses
          Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - sg-038b9a5368c362453
        SubnetIds:
        - subnet-041df92fe43a65071
        - subnet-018ba468c4eb92cc7
        - subnet-0a48cf26e0eafe0cf
        Ipv6AllowedForDualStack: false
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId:
              Ref: SkogAppApi
            Path: /find
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
    Metadata:
      SamResourceId: SkogAppTeigFilter
  SkogAppHKCut:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKCut.zip
      Description: Cut the Forest SVG and PNG from Nibio HK WMS based on the given
        GeoJSON
      FunctionName: SkogAppHKCut
      MemorySize: 128
      Timeout: 300
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Environment:
        Variables:
          GDAL_DATA: /var/task/share/gdal
          PROJ_LIB: /var/task/share/proj
      PackageType: Zip
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-north-1:992382379679:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKCut:*
        - Sid: AWSLambdaVPCAccessExecutionPermissions
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSubnets
          - ec2:DeleteNetworkInterface
          - ec2:AssignPrivateIpAddresses
          - ec2:UnassignPrivateIpAddresses
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:PutObjectAcl
          Resource: arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKCut/*
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SkogAppSecurityGroup
          - GroupId
        SubnetIds:
        - Ref: SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId:
              Ref: SkogAppApi
            Path: /cut
            Method: POST
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  SkogAppHKVectorize:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://skogapp-lambda-only-deployment-zips/SkogAppHKVectorize-V11.zip
      Description: Vectorize the Forest SVG and SHP from Nibio HK WMS based on the
        given GeoJSON
      FunctionName: SkogAppHKVectorize
      MemorySize: 128
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
      - arn:aws:lambda:eu-north-1:992382379679:layer:shapely:1
      Environment:
        Variables:
          GDAL_DATA: /var/task/share/gdal
          PROJ_LIB: /var/task/share/proj
      PackageType: Zip
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-north-1:992382379679:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:eu-north-1:992382379679:log-group:/aws/lambda/SkogAppHKVectorize:*
        - Sid: AWSLambdaVPCAccessExecutionPermissions
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSubnets
          - ec2:DeleteNetworkInterface
          - ec2:AssignPrivateIpAddresses
          - ec2:UnassignPrivateIpAddresses
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:ListBucket
          - s3:HeadObject
          Resource:
          - arn:aws:s3:::skogapp-lambda-generated-outputs
          - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKCut/*
          - arn:aws:s3:::skogapp-lambda-generated-outputs/SkogAppHKVectorize/*
      - Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource:
            Fn::GetAtt:
            - SkogAppQueue
            - Arn
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SkogAppSecurityGroup
          - GroupId
        SubnetIds:
        - Ref: SkogAppPrivateSubnet
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId:
              Ref: SkogAppApi
            Path: /vectorize
            Method: POST
        SqsEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SkogAppQueue
              - Arn
            BatchSize: 1
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  SkogAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: SkogAppVPC
  SkogAppPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SkogAppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: SkogAppPublicSubnet
  SkogAppPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SkogAppVPC
      CidrBlock: 10.0.2.0/24
      Tags:
      - Key: Name
        Value: SkogAppPrivateSubnet
  SkogAppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: SkogAppInternetGateway
  SkogAppAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: SkogAppVPC
      InternetGatewayId:
        Ref: SkogAppInternetGateway
  SkogAppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: SkogAppVPC
      Tags:
      - Key: Name
        Value: SkogAppPublicRouteTable
  SkogAppPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: SkogAppPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: SkogAppInternetGateway
  SkogAppNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - SkogAppEIP
        - AllocationId
      SubnetId:
        Ref: SkogAppPublicSubnet
      Tags:
      - Key: Name
        Value: SkogAppNatGateway
  SkogAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  SkogAppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: SkogAppVPC
      Tags:
      - Key: Name
        Value: SkogAppPrivateRouteTable
  SkogAppPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: SkogAppPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: SkogAppNatGateway
  SkogAppPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SkogAppPublicSubnet
      RouteTableId:
        Ref: SkogAppPublicRouteTable
  SkogAppPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SkogAppPrivateSubnet
      RouteTableId:
        Ref: SkogAppPrivateRouteTable
  SkogAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic
      VpcId:
        Ref: SkogAppVPC
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: SkogAppSecurityGroup
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewaySQSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:*
            Resource:
              Fn::GetAtt:
              - SkogAppQueue
              - Arn
  SkogAppQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SkogAppQueue
      VisibilityTimeout: 900
  SkogAppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SkogAppApi
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: '''POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      DefinitionBody:
        swagger: '2.0'
        info:
          title: SkogApp API
        paths:
          /sendToQueue:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/992382379679/SkogAppQueue
                httpMethod: POST
                type: aws
                credentials:
                  Fn::GetAtt:
                  - ApiGatewayRole
                  - Arn
                contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: WHEN_NO_TEMPLATES
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                requestTemplates:
                  application/json: 'Action=SendMessage&MessageBody=$util.urlEncode($input.body)

                    '
          definitions:
            Empty:
              type: object
              title: Empty
          /find:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppTeigFilter.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /cut:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppHKCut.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /vectorize:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkogAppHKVectorize.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
